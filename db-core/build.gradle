buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        // コード生成用の依存モジュール定義
        classpath "nu.studer:gradle-jooq-plugin:${jooqPluginVersion}"
        classpath "org.flywaydb:flyway-gradle-plugin:${flywayVersion}"
        classpath "mysql:mysql-connector-java:${mysqlDriverVersion}"
    }
}

plugins {
    id "org.flywaydb.flyway" version "${flywayVersion}"
    id "nu.studer.jooq" version "${jooqPluginVersion}"
}

dependencies {
    implementation "org.jooq:jooq:${jooqVersion}"
    implementation "mysql:mysql-connector-java:${mysqlDriverVersion}"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    //testImplementation "org.springframework.boot:spring-boot-starter-data-jdbc:${springBootVersion}"
    jooqRuntime "mysql:mysql-connector-java:${mysqlDriverVersion}"
    jooqRuntime 'org.slf4j:slf4j-simple:1.7.25'
    jooqRuntime project(':db-custom')
}


// ----------------------------------------------------------------------------------
// Flyway設定
// ----------------------------------------------------------------------------------
flyway {
    url = "${dbUrl}"
    user = "${dbUser}"
    password = "${dbPassword}"
}

// ----------------------------------------------------------------------------------
// JOOQコード生成設定
// ----------------------------------------------------------------------------------
def jooqDestDir = "${buildDir}/jooq-gen/"
jooq {
    version = "${jooqVersion}"
    edition = 'OSS' // if you use oracle, you should pay :-)

    // the name "sample" -> task name "generateSampleJooqSchemaSource" . see below.
    sample (sourceSets.main) {
        jdbc {
            driver = "${jdbcDriver}"
            url = "${dbUrl}"
            user = "${dbUser}"
            password = "${dbPassword}"
        }
        generator {
            target {
                packageName = "${jooqDestPackage}"
                directory = "${jooqDestDir}"
            }
            strategy {
                name = 'com.example.db.jooq.generator.SamplePrefixGeneratorStrategy'
            }
            database() {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = "${dbName}"
            }
            generate() {
                daos = true
                immutablePojos = true
                pojosEqualsAndHashCode = true
            }
        }
    }
}

// ----------------------------------------------------------------------------------
// タスク依存関係定義
// ----------------------------------------------------------------------------------

// Javaコンパイルの前にJOOQコード生成を行う
compileJava {
    dependsOn generateSampleJooqSchemaSource
    sourceSets.main.java.srcDirs(jooqDestDir)
}

// JOOQコード生成の前にFlywayMigreteを行う
generateSampleJooqSchemaSource {
    dependsOn flywayMigrate
}

clean {
    delete jooqDestDir
}


